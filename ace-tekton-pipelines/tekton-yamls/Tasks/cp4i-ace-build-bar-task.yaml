apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-bar
spec:
  workspaces:
    - name: build-dir
      description: image build dir
    - name: output
      description: git repo location
  params:
    - default: quay.io/buildah/stable:v1.11.0
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - description: Specify the name of the project being built.
      name: project
      type: string
    - default: $(workspaces.build-dir.path) # .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: "false"
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - name: pathToContext
      type: string
      description: The path to the build context within the workspace
      default: workspace
    - name: artifactoryRepo
      type: string
    - name: imageTag
      type: string
    - name: imageUrl
      type: string
  steps:

  - name: fetch-bar-file
    image: curlimages/curl
    envFrom:
      - secretRef:
          name: artifactory-credentials
    command: ["/bin/sh", "-c"]
    args:
      - |
        set -eu;
        # env
        pwd
        ls -la        
        echo "workspace path"
        echo $(workspaces.build-dir.path)
        cd $(workspaces.build-dir.path)
        # pwd

        find / -name 'config.json'
        find / -name 'daemon.json'
        
        echo "Download BAR"
        echo "BAR URL: $(ARTIFACTORY_URL)/artifactory/$(params.artifactoryRepo)/$(params.project)-$(params.imageTag).bar"
        curl -u $(ARTIFACTORY_USER):$(ARTIFACTORY_PASSWORD) -O "$(ARTIFACTORY_URL)/artifactory/$(params.artifactoryRepo)/$(params.project)-$(params.imageTag).bar"
    securityContext:
      privileged: true
      runAsUser: 0

  - name: run-docker-commands
    image: docker
    # workingDir: /artifacts
    env:
      - name: DOCKER_HOST
        value: "tcp://localhost:2376"
      # Verify TLS.
      - name: DOCKER_TLS_VERIFY
        value: "0"
      # Use the certs generated by the sidecar daemon.
      - name: DOCKER_CERT_PATH
        value: /certs/client
      # The location of the client configuration files.
      # - name: DOCKER_CONFIG
      #   value: /steps
    command: ["/bin/sh", "-c"]
    args:
      - |
        set -eu;
        # Lower case image URL for docker image requirement
        imageUrlLower=`echo -n "$(params.imageUrl)" | tr '[:upper:]' '[:lower:]'`
        env
        pwd
        ls -la
        echo $(workspaces.build-dir.path)
        cd $(workspaces.build-dir.path)
        pwd
        
        printf "Building image\n"
        # buildah bud --build-arg PROJECT1=$(params.project) --tls-verify=$(params.TLSVERIFY) --layers -f $(params.DOCKERFILE) -t $imageUrlLower:$(params.imageTag) $(params.CONTEXT)

        printf "Building image with docker\n"
        docker build --tag "$imageUrlLower:$(params.imageTag)" --file $(params.DOCKERFILE) $(params.CONTEXT)
        docker inspect $imageUrlLower:$(params.imageTag)
        docker push $imageUrlLower:$(params.imageTag)

        echo "Done."
    volumeMounts:
      - mountPath: /steps
        name: steps-volume
      - mountPath: /certs/client
        name: dind-certs
  sidecars:
      - image: docker:dind
        name: server
        args:
          # - --storage-driver=vfs
          # - --userland-proxy=false
          - --debug
          # - --insecure-registry=$(params.insecure_registry)
          - --insecure-registry=169.62.82.19:32265
        securityContext:
          privileged: true
        env:
          # Write generated certs to the path shared with the client.
          - name: DOCKER_TLS_CERTDIR
            value: /certs
          # - name: DOCKER_OPTS
          #   value: '--insecure-registry=169.62.82.19:32265'
        volumeMounts:
          - mountPath: /certs/client
            name: dind-certs
        # Wait for the dind daemon to generate the certs it will share with the client.
        readinessProbe:
          periodSeconds: 1
          exec:
            command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}

  # Buildah
  # - args:
  #   - -c
  #   - |
  #     set -eu;
  #     #source ./env-config
  #     curl -u $(ARTIFACTORY_USER):$(ARTIFACTORY_PASSWORD) -O "$(ARTIFACTORY_URL)/artifactory/$(params.artifactoryRepo)/$(params.project)-$(params.imageTag).bar"

  #     pwd
  #     ls -la
  #     echo $(workspaces.output.path)

  #     #mv $(params.project)-$(params.imageTag).bar $(workspaces.output.path)/workspace/$(params.project)/gen/$(params.project)-$(params.imageTag).bar

  #     #ls -la output
  #     #ls -la output/workspace
  #     #ls -la $(workspaces.output.path)/workspace/$(params.project)/gen/
  #     #cd output
  #     #ls -la

  #     printf "Building image\n"
  #     buildah bud --build-arg PROJECT1=$(params.project) --tls-verify=$(params.TLSVERIFY) --layers -f $(params.DOCKERFILE) -t $(params.imageUrl):$(params.imageTag) $(params.CONTEXT)
  #   command:
  #   - /bin/bash
  #   envFrom:
  #   - secretRef:
  #       name: artifactory-credentials
  #   image: $(params.BUILDER_IMAGE)
  #   name: build-image
  #   securityContext:
  #     privileged: true
  #     runAsUser: 0
  #   volumeMounts:
  #   - mountPath: /var/lib/containers
  #     name: varlibcontainers
  # - args:
  #   - '-c'
  #   - >
  #     set -e

  #     buildah push --tls-verify=$(params.TLSVERIFY)
  #     "$(params.imageUrl):$(params.imageTag)"
  #     "docker://$(params.imageUrl):$(params.imageTag)"

  #   command:
  #   - /bin/bash
  #   image: $(params.BUILDER_IMAGE)
  #   name: push-image
  #   securityContext:
  #     privileged: true
  #     runAsUser: 0
  #   volumeMounts:
  #   - mountPath: /var/lib/containers
  #     name: varlibcontainers
  # volumes:
  # - emptyDir: {}
  #   name: varlibcontainers
